/*
*    Author         : AKHIL NAYABU
*    UID            : 2000075395
*    Assignment     : 1
*    Email          : anayabu@iupui.edu
*/

/* CREATION OF CUSTOMERS TABLE */
CREATE TABLE CUSTOMERS
(
    C_ID         INTEGER,
    C_NAME       VARCHAR(20),
    CREDIT_LIMIT INTEGER,
    INCOME_LEVEL VARCHAR(20),
    GENDER       VARCHAR(20),
    PRIMARY KEY (C_ID)
);


/* CREATION OF WAREHOUSE TABLE */ 
CREATE TABLE WAREHOUSE
(
    WAREHOUSE_ID      INTEGER,
    LOCATION          VARCHAR2(20),
    QUANTITY_IN_STOCK INTEGER,
    PRIMARY KEY (WAREHOUSE_ID)
);  

  
/* CREATION OF BOOK TABLE */
CREATE TABLE BOOK
(
    BOOK_ID          INTEGER,
    BOOK_NAME        VARCHAR2(20),
    WAREHOUSE_ID     INTEGER,
    QUANTITY_ON_HAND INTEGER,
    WARRANTY_PERIOD  INTEGER,
    PURCHASED_PRICE  INTEGER,
    PRIMARY KEY (BOOK_ID),
    FOREIGN KEY (WAREHOUSE_ID) REFERENCES WAREHOUSE(WAREHOUSE_ID) ON DELETE CASCADE
  );

  
/* CREATION OF ORDERS TABLE */  
CREATE TABLE ORDERS
  (
    ORDER_ID     INTEGER,
    ORDER_DATE   DATE,
    C_ID         INTEGER,
    ORDER_STATUS VARCHAR2(20),
    PRIMARY KEY (ORDER_ID),
    FOREIGN KEY (C_ID) REFERENCES CUSTOMERS(C_ID) ON DELETE CASCADE
  );
 
 

/* CREATION OF ORDER_ITEMS TABLE */ 
CREATE TABLE ORDER_ITEMS
  (
    ORDER_ID   INTEGER,
    BOOK_ID    INTEGER,
    UNIT_PRICE INTEGER,
    QUANTITY   INTEGER,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE
  );
  
 
 
/* INSERTION INTO CUSTOMERS TABLE */
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (1,'JONE',140,'L','F');
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (2,'CHRIS',230,'M','M');
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (3,'SAYWER',480,'H','F');
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (4,'KROPY',500,'H','M');
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (5,'LUCY',220,'M','M');
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (6,'MANDO',100,'L','F');
INSERT INTO CUSTOMERS (C_ID,C_NAME,CREDIT_LIMIT,INCOME_LEVEL,GENDER) VALUES (7,'BUNNY',300,'M','F');

/* INSERTION INTO WAREHOUSE TABLE */
INSERT INTO WAREHOUSE (WAREHOUSE_ID,LOCATION,QUANTITY_IN_STOCK) VALUES (1,'LOS ANGLES',1100);
INSERT INTO WAREHOUSE (WAREHOUSE_ID,LOCATION,QUANTITY_IN_STOCK) VALUES (2,'CHICAGO',800);
INSERT INTO WAREHOUSE (WAREHOUSE_ID,LOCATION,QUANTITY_IN_STOCK) VALUES (3,'NEW YORK',700);


/* INSERTION INTO BOOK TABLE */
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (1,'LIFE WITH DOG',1,18,90,6);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (2,'INFERNO',1,25,180,8);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (3,'DOCTOR SLEEP',3,9,365,10);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (4,'DISAPPEAR',2,60,30,15);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (5,'SIX YEARS',2,50,365,7);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (6,'THE LOWLAND',1,5,120,25);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (7,'WAVE',3,11,60,20);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (8,'LOST WORLD',2,20,30,15);
INSERT INTO BOOK (BOOK_ID,BOOK_NAME,WAREHOUSE_ID,QUANTITY_ON_HAND,WARRANTY_PERIOD,PURCHASED_PRICE) VALUES (9,'WHISKEY BEACH',3,33,150,10);


/* INSERTION INTO ORDERS TABLE */
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (1,TO_DATE('01-08-16','DD-MM-RR'),1,'P');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (2,TO_DATE('27-08-16','DD-MM-RR'),2,'C');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (3,TO_DATE('20-06-16','DD-MM-RR'),3,'C');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (4,TO_DATE('01-08-16','DD-MM-RR'),4,'C');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (5,TO_DATE('31-08-16','DD-MM-RR'),1,'P');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (6,TO_DATE('01-09-16','DD-MM-RR'),4,'P');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (7,TO_DATE('20-07-16','DD-MM-RR'),6,'C');
INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,C_ID,ORDER_STATUS) VALUES (8,TO_DATE('11-08-16','DD-MM-RR'),2,'C');


/* INSERTION INTO ORDERS_ITEMS TABLE */
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (1,1,19,2);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (1,2,20,1);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (2,1,17,1);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (3,4,20,2);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (3,2,25,3);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (3,8,16,1);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (4,4,21,10);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (5,2,10,2);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (5,8,28,1);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (6,9,16,10);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (7,5,12,3);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (7,7,25,1);
INSERT INTO ORDER_ITEMS (ORDER_ID,BOOK_ID,UNIT_PRICE,QUANTITY) VALUES (8,4,30,2);

/* QUERY 1(QUESTION 1) */
SELECT GENDER, 
COUNT(*) 
FROM CUSTOMERS 
GROUP BY GENDER ;


/* QUERY 2(QUESTION 2) */
SELECT C_NAME,
  (SELECT AVG(CREDIT_LIMIT) FROM CUSTOMERS WHERE INCOME_LEVEL='M'
  ) AS AVERAGE
FROM CUSTOMERS
WHERE INCOME_LEVEL='M' ;


/* QUERY 3(QUESTION 3) */
SELECT C.C_NAME
FROM CUSTOMERS C
WHERE C.INCOME_LEVEL='H'
AND C.C_ID         IN
  (SELECT O.C_ID FROM ORDERS O WHERE O.ORDER_STATUS='C' AND C.C_ID=O.C_ID
  ) ;


/* QUERY 4(QUESTION 4) */
SELECT *
FROM
  (SELECT C.C_NAME,
    COUNT(*)
  FROM CUSTOMERS C,
    ORDERS O
  WHERE C.C_ID=O.C_ID
  GROUP BY C.C_NAME
  order by COUNT(*) DESC
  )
WHERE ROWNUM=1;


/* QUERY 5(QUESTION 5) */
select c_name from(
SELECT C.C_ID,C.C_NAME,
  SUM(O2.QUANTITY) AS TOTALQ 
FROM CUSTOMERS C,
  ORDERS O,
  ORDER_ITEMS O2
WHERE C.C_ID      =O.C_ID
AND O.ORDER_ID    =O2.ORDER_ID
AND C.INCOME_LEVEL <> 'H'
GROUP BY C.C_ID,C.C_NAME
HAVING SUM(O2.QUANTITY)>=3) ;


/* QUERY 6(QUESTION 6) */
SELECT *
FROM
  (SELECT SUM(O2.UNIT_PRICE*O2.QUANTITY) AS SALE_REVENUE
  FROM ORDER_ITEMS O2,
    ORDERS O1
  WHERE O2.ORDER_ID  =O1.ORDER_ID
  AND O1.ORDER_STATUS='C'
  ) ,
  (SELECT SUM((O2.UNIT_PRICE*O2.QUANTITY)-(B1.PURCHASED_PRICE*O2.QUANTITY)) AS SALE_PROFIT
  FROM ORDER_ITEMS O2,
    BOOK B1
  WHERE O2.BOOK_ID =B1.BOOK_ID
  AND O2.ORDER_ID IN
    (SELECT O3.ORDER_ID FROM ORDERS O3 WHERE O3.ORDER_STATUS='C'
    )
  );


/* QUERY 7(QUESTION 7) */  
select c_name 
from (
SELECT C.C_ID,C.C_NAME,
  SUM(O2.UNIT_PRICE*O2.QUANTITY) AS ORDERED_VALUE
FROM CUSTOMERS C,
  ORDERS O,
  ORDER_ITEMS O2
WHERE C.C_ID  =O.C_ID
AND O.ORDER_ID=O2.ORDER_ID
GROUP BY C.C_ID,C.C_NAME
HAVING SUM(O2.UNIT_PRICE*O2.QUANTITY)>
  (SELECT (C2.CREDIT_LIMIT/2) FROM CUSTOMERS C2 WHERE C.C_NAME=C2.C_NAME
  ) 
);


/* QUERY 8(QUESTION 8) */  
SELECT O.ORDER_ID  AS ORDER_ID ,
  B.BOOK_NAME       AS BOOK_NAME ,
  O.ORDER_DATE     AS ORDER_DATE ,
  B.WARRANTY_PERIOD AS WARRANTY_PERIOD
FROM BOOK B
JOIN ORDER_ITEMS O2
ON O2.BOOK_ID = B.BOOK_ID
JOIN ORDERS O
ON O.ORDER_ID                  = O2.ORDER_ID
WHERE (SYSDATE - O.ORDER_DATE) > B.WARRANTY_PERIOD
AND B.QUANTITY_ON_HAND          > 10 ;


/* QUERY 9(QUESTION 9) */
SELECT distinct C.C_NAME
FROM CUSTOMERS C,
  ORDERS O,
  ORDER_ITEMS O2
WHERE C.C_ID                        =O.C_ID
AND o.order_id=o2.order_id
AND EXTRACT(MONTH FROM O.ORDER_DATE)=08
AND EXTRACT(YEAR FROM O.ORDER_DATE)=2016
GROUP BY C.C_NAME,C.C_ID,O.ORDER_ID 
having sum(o2.quantity)>=2;

/* QUERY 10(QUESTION 10) */
SELECT C.C_NAME,
  COUNT(DISTINCT B.WAREHOUSE_ID)
FROM CUSTOMERS C,
  ORDERS O,
  ORDER_ITEMS O2,
  BOOK B
WHERE C.C_ID  =O.C_ID
AND O.ORDER_ID=O2.ORDER_ID
AND O2.BOOK_ID=B.BOOK_ID
GROUP BY C.C_NAME
HAVING COUNT(DISTINCT B.WAREHOUSE_ID)>1;


/* QUERY 11(QUESTION 11) */
SELECT COUNT(DISTINCT C.C_ID) AS TOTALMALENOTIN08
FROM CUSTOMERS C
LEFT JOIN ORDERS O
  ON O.C_ID = C.C_ID
WHERE C.GENDER                         ='M'
AND NVL(EXTRACT(MONTH FROM O.ORDER_DATE), -1) <> 08 
AND NVL(EXTRACT(YEAR FROM O.ORDER_DATE),-1)<>2016;


/* QUERY 12(QUESTION 12) */
SELECT B2.BOOK_NAME
FROM BOOK B2
WHERE B2.BOOK_ID NOT IN
  (SELECT DISTINCT B.BOOK_ID
  FROM BOOK B,
    CUSTOMERS C,
    ORDERS O,
    ORDER_ITEMS O2
  WHERE O.ORDER_ID  =O2.ORDER_ID
  AND B.BOOK_ID     =O2.BOOK_ID
  AND O.C_ID        =C.C_ID
  AND C.INCOME_LEVEL='H'
  );
  
/* QUERY 13(QUESTION 13) */
SELECT 
    gender, book_id, gnd_quantity
FROM
    (SELECT 
            c.gender AS gender,
            o2.book_id AS book_id,
            SUM(o2.QUANTITY) AS gnd_quantity,
            RANK() OVER(PARTITION BY c.gender order by SUM(o2.QUANTITY) desc) AS rnk
    FROM
        orders o
    JOIN customers c ON c.c_id = o.c_id
    JOIN ORDER_ITEMS o2 ON o2.order_id = o.order_id
    GROUP BY c.gender , o2.book_id) gnd_cnts
WHERE
    gnd_cnts.rnk = 1; 
  

/* QUERY 14(QUESTION 14) */
SELECT O.ORDER_ID,
  SUM(O2.QUANTITY*O2.UNIT_PRICE) AS OVALUES
FROM ORDERS O,
  ORDER_ITEMS O2
WHERE O.ORDER_ID=O2.ORDER_ID
GROUP BY O.ORDER_ID
ORDER BY OVALUES DESC ;


/* QUERY 15(QUESTION 15) */
SELECT BOOK_NAME
FROM
  (SELECT BOOK_NAME,
    RANK() OVER ( ORDER BY NOB DESC ) AS RNK
  FROM
    (
SELECT B.BOOK_NAME,
    count(DISTINCT C.C_ID) AS NOB
    FROM BOOK B,
      ORDER_ITEMS O2,
      ORDERS O,
      CUSTOMERS C
    WHERE B.BOOK_ID=O2.BOOK_ID
    AND O2.ORDER_ID = O.ORDER_ID
    AND O.C_ID = C.C_ID
    GROUP BY B.BOOK_ID, B.BOOK_NAME
    )
  )
WHERE RNK=1 ;

commit;


/* QUERY 16(QUESTION 16) */
SELECT B.BOOK_NAME,
  SUM(((O2.UNIT_PRICE*O2.QUANTITY)-(B.PURCHASED_PRICE*O2.QUANTITY))/O2.QUANTITY) AS PROFIT
FROM BOOK B,
  ORDER_ITEMS O2
WHERE O2.BOOK_ID=B.BOOK_ID
GROUP BY B.BOOK_NAME 
HAVING SUM(((O2.UNIT_PRICE*O2.QUANTITY)-(B.PURCHASED_PRICE*O2.QUANTITY))/O2.QUANTITY) IN (
SELECT MAX(SUM(((O2.UNIT_PRICE*O2.QUANTITY)-(B.PURCHASED_PRICE*O2.QUANTITY))/O2.QUANTITY))
FROM BOOK B,
  ORDER_ITEMS O2
WHERE O2.BOOK_ID=B.BOOK_ID
GROUP BY B.BOOK_NAME
UNION
SELECT MIN(SUM(((O2.UNIT_PRICE*O2.QUANTITY)-(B.PURCHASED_PRICE*O2.QUANTITY))/O2.QUANTITY))
FROM BOOK B,
  ORDER_ITEMS O2
WHERE O2.BOOK_ID=B.BOOK_ID
GROUP BY B.BOOK_NAME
) order by profit desc;

commit;


/*Update 1*/

CREATE OR REPLACE TRIGGER DELETE_ORDERS
AFTER UPDATE OF CREDIT_LIMIT ON CUSTOMERS
FOR EACH ROW 
BEGIN
    DELETE FROM ORDERS DORD
    WHERE DORD.ORDER_ID IN (
        SELECT ORD.ORDER_ID
        FROM ORDER_ITEMS OTM
        JOIN ORDERS ORD
            ON ORD.ORDER_ID = OTM.ORDER_ID
        GROUP BY ORD.ORDER_ID
        HAVING SUM(OTM.UNIT_PRICE * OTM.QUANTITY) > :NEW.CREDIT_LIMIT
    )
    AND DORD.ORDER_STATUS = 'P';
END;
/

UPDATE CUSTOMERS 
SET CREDIT_LIMIT=0.7*CREDIT_LIMIT
WHERE GENDER='F';
commit;

/*Update 2 */
CREATE OR REPLACE TRIGGER UPDATE_ORDERS
AFTER UPDATE OF ORDER_STATUS ON ORDERS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE 
    C_BOOK_ID BOOK.BOOK_ID%TYPE;
    C_NEW_QUANT BOOK.QUANTITY_ON_HAND%TYPE;
    CURSOR c_books_quantity IS (
        SELECT OI.BOOK_ID, (BK.QUANTITY_ON_HAND - OI.QUANTITY)
        FROM ORDER_ITEMS OI
        JOIN Book BK
            ON BK.BOOK_ID = OI.BOOK_ID
        WHERE OI.ORDER_ID = :NEW.ORDER_ID
    );
BEGIN
    OPEN C_BOOKS_QUANTITY;
    LOOP
        FETCH C_BOOKS_QUANTITY INTO C_BOOK_ID, C_NEW_QUANT; 
        EXIT WHEN C_BOOKS_QUANTITY%NOTFOUND;
        UPDATE BOOK
        SET QUANTITY_ON_HAND = C_NEW_QUANT
        WHERE BOOK_ID = C_BOOK_ID
        ;
    END LOOP;
END;
/

update orders set order_status='C' where order_status='P';
commit;

/*Update 3*/
delete from CUSTOMERS where c_name='KROPY';
commit;

/*Update 4*/
UPDATE book
SET WARRANTY_PERIOD=
  CASE
    WHEN warranty_period+30>=365
    THEN 365
    ELSE
    warranty_period+30
   END
where warehouse_id IN (select warehouse_id from warehouse where UPPER(location)='CHICAGO');
commit;


/* dropping tables */
drop table order_items;
drop table orders;
drop table book;
drop table warehouse;
drop table customers;
    
    